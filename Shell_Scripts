
Youâ€™d never get any work done if you typed every command that needs to be run on your Linux
system when it starts. Likewise, you could work more efficiently if you grouped together sets
of commands that you run all the time. Shell scripts can handle these tasks.



Operators for Test Expressions
---------------------------

Operator                    What Is Being Tested?
--------                    ---------------------
-a file ----------->  Does the file exist? (same as -e)
-b file ----------->  Is the file a block special device?
-c file ----------->  Is the file character special (for example, a character device)? Used to identify serial lines and terminal devices.
-d file ----------->  Is the file a directory?
-e file ----------->  Does the file exist? (same as -a)
-f file ----------->  Does the file exist, and is it a regular file (for example, not a directory, socket, pipe, link, or device file)?
-g file ----------->  Does the file have the set group id (SGID) bit set?
-h file ----------->  Is the file a symbolic link? (same as -L)
-k file ----------->  Does the file have the sticky bit set?
-L file ----------->  Is the file a symbolic link?
-n string --------->  Is the length of the string greater than 0 bytes?
-O file ----------->  Do you own the file?
-p file ----------->  Is the file a named pipe?
-r file  ---------->  Is the file readable by you?
-s file ----------->  Does the file exist, and is it larger than 0 bytes?
-S file ----------->  Does the file exist, and is it a socket?
-t fd ------------->  Is the file descriptor connected to a terminal?
-u file ----------->  Does the file have the set user id (SUID) bit set?
-w file ----------->  Is the file writable by you?
-x file ----------->  Is the file executable by you?
-z string --------->  Is the length of the string 0 (zero) bytes?
expr1 -a expr2  --->  Are both the first expression and the second expression true?
expr1 -o expr2 ---->  Is either of the two expressions true?
file1 -nt file2 --->  Is the first file newer than the second file (using the modification time stamp)?
file1 -ot file2 --->  Is the first file older than the second file (using the modification time stamp)?
file1 -ef file2 --->  Are the two files associated by a link (a hard link or a symbolic link)?
var1 = var2  ------>  Is the first variable equal to the second variable?
var1 -eq var2 ----->  Is the first variable equal to the second variable?
var1 -ge var2 ----->  Is the first variable greater than or equal to the second variable?
var1 -gt var2 ----->  Is the first variable greater than the second variable?
var1 -le var2 ----->  Is the first variable less than or equal to the second variable?
var1 -lt var2 ----->  Is the first variable less than the second variable?
var1 != var2  ----->  Is the first variable not equal to the second variable?
var1 -ne var2 ----->  Is the first variable not equal to the second variable?

------------

$ FOO="Mixed UPpEr aNd LoWeR cAsE"
$ echo $FOO | tr [A-Z] [a-z]
mixed upper and lower case

--------



The stream editor (sed)
-------------------------
$ sed -n '/home/p' /etc/passwd
chris:x:1000:1000:Chris Negus:/home/chris:/bin/bash
joe:x:1001:1001:Joe Smith:/home/joe:/bin/bash


$ sed 's/Mac/Linux/g' somefile.txt > fixed_file.txt

$ cat somefile.txt | sed 's/Mac/Linux/g' > fixed_file.txt

$ cat somefile.txt | sed 's/ *$//' > fixed_file.txt



--------------
Backup script
-------------
#!/bin/bash
# (@)/my_backup
# A very simple backup script
#
# Change the TAPE device to match your system.
# Check /var/log/messages to determine your tape device.
TAPE=/dev/rft0
# Rewind the tape device $TAPE
mt $TAPE rew
# Get a list of home directories
HOMES=`grep /home /etc/passwd | cut -f6 -d':'`
# Back up the data in those directories
tar cvf $TAPE $HOMES
# Rewind and eject the tape.
mt $TAPE rewoffl


































